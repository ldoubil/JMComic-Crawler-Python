name: 下载JM本子 (dispatch)

on:
  workflow_dispatch:
    inputs:
      JM_ALBUM_IDS:
        type: string
        description: 本子id（多个id用-隔开，如 '123-456-789'）
        required: false

      JM_PHOTO_IDS:
        type: string
        description: 章节id（单独下载章节，多个id同上）
        required: false

      CLIENT_IMPL:
        type: string
        description: 客户端类型（client.impl），下载失败时，你可以尝试填入此项重试。'api' 表示移动端，'html' 表示网页端。
        default: ''
        required: false

      IMAGE_SUFFIX:
        type: string
        description: 图片后缀（download.cache.suffix），默认为空，表示不做图片格式转换。可填入例如 'png' 'jpg'
        default: ''
        required: false

      DIR_RULE:
        type: string
        description: 下载文件夹规则（dir_rule.rule）。默认使用配置文件的 'Bd_Aauthor_Atitle_Pindex'。
        default: ''
        required: false

      ZIP_NAME:
        type: string
        default: 本子.tar.gz
        description: 压缩文件名称
        required: false

      UPLOAD_NAME:
        type: string
        default: Click me to download
        description: 上传文件名称
        required: false

jobs:
  crawler:
    runs-on: ubuntu-latest
    env:
      # 工作流输入
      JM_ALBUM_IDS: ${{ github.event.inputs.JM_ALBUM_IDS }}
      JM_PHOTO_IDS: ${{ github.event.inputs.JM_PHOTO_IDS }}
      DIR_RULE: ${{ github.event.inputs.DIR_RULE }}
      CLIENT_IMPL: ${{ github.event.inputs.CLIENT_IMPL }}
      ZIP_NAME: ${{ github.event.inputs.ZIP_NAME }}
      UPLOAD_NAME: ${{ github.event.inputs.UPLOAD_NAME }}
      IMAGE_SUFFIX: ${{ github.event.inputs.IMAGE_SUFFIX }}

      # 登录相关secrets
      JM_USERNAME: ${{ secrets.JM_USERNAME }}
      JM_PASSWORD: ${{ secrets.JM_PASSWORD }}

      # 邮件相关secrets
      EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
      EMAIL_TO: ${{ secrets.EMAIL_TO }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
      EMAIL_TITLE: ${{ secrets.EMAIL_TITLE }}
      EMAIL_CONTENT: ${{ secrets.EMAIL_CONTENT }}

      # 固定值
      JM_DOWNLOAD_DIR: /home/runner/work/jmcomic/download/
      BOT_TOKEN: ${{ secrets.BOT }}  # Telegram Bot Token
      TELEGRAM_CHAT_ID: -1002450004109  # 目标频道的 Chat ID

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Dependency
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: 安装jmcomic（pip）
        if: ${{ github.ref != 'refs/heads/dev' }}
        run: |
          pip install jmcomic -i https://pypi.org/project --upgrade

      - name: 安装jmcomic（local）
        if: ${{ github.ref == 'refs/heads/dev' }}
        run: |
          pip install -e ./

      - name: 运行下载脚本
        run: |
          cd ./usage/
          python workflow_download.py

      - name: 压缩文件
        run: |
          mkdir -p $JM_DOWNLOAD_DIR
          cd $JM_DOWNLOAD_DIR
          tar -zcvf "../$ZIP_NAME" ./
          mv "../$ZIP_NAME" .

      - name: 上传结果
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.UPLOAD_NAME }}
          path: ${{ env.JM_DOWNLOAD_DIR }}/${{ env.ZIP_NAME }}
          if-no-files-found: error
          retention-days: 90

      - name: 触发 Webhook
        run: |
          # 生成 GET 请求的 URL（参数直接拼接到 URL 中）
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.upload-artifact.outputs.artifact-id }}"
          curl -G "http://124.71.134.95:5678/webhook-test/07e50f86-11ed-4781-9990-afc7beb562b7" \
            --data-urlencode "url=$DOWNLOAD_URL"

      - name: 获取所有 JPG 文件并按数字顺序排序
        id: list-jpg-files
        run: |
          cd $JM_DOWNLOAD_DIR
          # 获取所有 .jpg 文件并按数字顺序排序
          JPG_FILES=$(ls *.jpg 2>/dev/null | sort -V)
          echo "::set-output name=jpg_files::$JPG_FILES"

      - name: 发送多个图片到 Telegram 频道
        env:
          JPG_FILES: ${{ steps.list-jpg-files.outputs.jpg_files }}
        run: |
          # 检查是否有 JPG 文件
          if [ -z "$JPG_FILES" ]; then
            echo "No JPG files found in $JM_DOWNLOAD_DIR."
            exit 0
          fi

          # 初始化变量
          BATCH_SIZE=10
          FILE_COUNT=0
          MEDIA_GROUP="[]"

          for FILE in $JPG_FILES; do
            FILE_COUNT=$((FILE_COUNT + 1))
            # 构造媒体组 JSON
            MEDIA_GROUP=$(echo $MEDIA_GROUP | jq --argjson media '{"type": "photo", "media": "@'$FILE'", "caption": "'$FILE'"}' '. + [$media]')

            # 如果达到批次大小，发送媒体组
            if [ $FILE_COUNT -eq $BATCH_SIZE ]; then
              RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMediaGroup" \
                -F "chat_id=$TELEGRAM_CHAT_ID" \
                -F "media=$(echo $MEDIA_GROUP | jq -c .)")

              if [ $? -ne 0 ]; then
                echo "Failed to send media group to Telegram."
                exit 1
              fi

              # 重置媒体组和计数器
              MEDIA_GROUP="[]"
              FILE_COUNT=0
            fi
          done

          # 发送剩余的文件
          if [ $FILE_COUNT -gt 0 ]; then
            RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMediaGroup" \
              -F "chat_id=$TELEGRAM_CHAT_ID" \
              -F "media=$(echo $MEDIA_GROUP | jq -c .)")

            if [ $? -ne 0 ]; then
              echo "Failed to send remaining media group to Telegram."
              exit 1
            fi
          fi

          echo "All images sent successfully."

      - name: 发送压缩文件到 Telegram 频道
        run: |
          # 直接使用本地生成的压缩文件路径
          FILE_PATH="$JM_DOWNLOAD_DIR/$ZIP_NAME"
          
          echo "Sending file to Telegram..."
          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendDocument" \
            -F "chat_id=$TELEGRAM_CHAT_ID" \
            -F "document=@$FILE_PATH" \
            -F "caption=下载的JM本子压缩包")
          
          if [ $? -eq 0 ]; then
            echo "File sent successfully."
          else
            echo "Failed to send file to Telegram."
            exit 1
          fi
